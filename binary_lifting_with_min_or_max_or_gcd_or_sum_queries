/*
 * Competitive Programming Template
 * Author: Abhinav Gupta
 * GitHub: @aabhinavvvvvvv
 * MAHAKAL KI JAI
 */

#include <bits/stdc++.h>
using namespace std;

using ll = long long;
using pii = pair<int,int>;

const int N = 2e5 + 5;
const int LOG = 20;

#define pb push_back
#define fastIO() ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);

vector<vector<pii>> up; // {ancestor, minNodeID}
vector<int> depth;
vector<vector<int>> adj;

void dfs(int node, int parent) {
    // immediate parent
    up[node][0] = { parent, (parent == -1 ? node + 1 : min(node + 1, parent + 1)) };

    // fill binary lifting table for this node
    for (int j = 1; j < LOG; j++) {
        int mid_ancestor = up[node][j - 1].first;
        if (mid_ancestor != -1) {
            up[node][j].first = up[mid_ancestor][j - 1].first;
            up[node][j].second = min(up[node][j - 1].second, up[mid_ancestor][j - 1].second);
        }
    }

    for (auto nxt : adj[node]) {
        if (nxt == parent) continue;
        depth[nxt] = depth[node] + 1;
        dfs(nxt, node);
    }
}

pii findlca_min(int u, int v) {
    int minNode = min(u + 1, v + 1);

    if (depth[u] < depth[v]) swap(u, v);
    int diff = depth[u] - depth[v];

    for (int i = 0; i < LOG; ++i) {
        if (diff & (1 << i)) {
            minNode = min(minNode, up[u][i].second);
            u = up[u][i].first;
        }
    }

    if (u == v) return {u, minNode};

    for (int i = LOG - 1; i >= 0; --i) {
        if (up[u][i].first != -1 && up[u][i].first != up[v][i].first) {
            minNode = min(minNode, up[u][i].second);
            minNode = min(minNode, up[v][i].second);
            u = up[u][i].first;
            v = up[v][i].first;
        }
    }

    minNode = min(minNode, up[u][0].second);
    minNode = min(minNode, up[v][0].second);

    return { up[u][0].first, minNode };
}

void solve() {
    int n, q;
    cin >> n >> q;
    adj.assign(n, {});
    depth.assign(n, 0);
    up.assign(n, vector<pii>(LOG, {-1, INT_MAX}));

    for (int i = 0; i < n - 1; i++) {
        int u, v; cin >> u >> v;
        --u; --v;
        adj[u].pb(v);
        adj[v].pb(u);
    }

    dfs(0, -1);

    while (q--) {
        int u, v; cin >> u >> v;
        --u; --v;
        pii res = findlca_min(u, v);
        int lca = res.first;
        int minNode = res.second;
        int dist = depth[u] + depth[v] - 2 * depth[lca];
        cout << dist << " " << minNode << "\n";
    }
}

int main() {
    fastIO();
    freopen("Error.txt", "w", stderr);
    int t = 1;
    // cin >> t;
    while (t--) solve();
    return 0;
}
